{"name":"Go Paymill","tagline":"Paymill API client for Go lang","body":"# Go Paymill\r\n\r\nHere is how to connect to and interact with the Paymill API in Go.\r\n\r\nEach model type is mapped to a struct, which has New() Get() All() methods.\r\n\r\n* Client\r\n* Payment\r\n* Transaction\r\n* Subscription\r\n\r\n\r\n## Connect\r\n\r\nImport the package into your app and \r\n\r\n```\r\npackage yourapp\r\n\r\nimport (\r\n    \"fmt\"\r\n    gp \"github.com/cyrrill/gopaymill\"\r\n)\r\n\r\n// Creates a connection client using your private API key\r\np := gp.Paymill{\r\n    PrivateKey: \"@see https://app.paymill.com/development/api-keys\",\r\n}\r\n```\r\n\r\n## Models\r\nThe create individual structs and call the action method on the Paymill connection &p\r\n```\r\n// Creates a new client \r\nclient := gp.Client{\r\n    Description: \"Golang\", \r\n    Email: \"test@golang.org\",\r\n}.New(&p)\r\n\r\n```\r\n\r\nReuse values directly in following calls\r\n```\r\n\r\n// Create a new payment object. Get the token from Paymill\r\n// BridgeJS, client ID comes previous call\r\n\r\npayment := gp.Payment{\r\n    Token:\"tok_000000000000\", \r\n    Client: client.ID\r\n}.New(&p)\r\n\r\n\r\n// Create a recurring subscritpion with new payment method\r\n\r\nsubscription := gp.Subscription{\r\n    Offer:   \"offer_0000000000000000\", \r\n    Client:  client.ID, \r\n    Payment: payment.ID,\r\n}.New(&p)\r\n\r\n```\r\n\r\n## Output\r\n\r\nThe values in all the models are directly accesible after the call as:\r\n```\r\nfmt.Println(\"Subscription ID: \"+subscription.ID)\r\n\r\nfmt.Println(\"Client email: \"+client.Email)\r\n\r\n```\r\n\r\n## Get one, Get all\r\n\r\n```\r\n// Lookup by key\r\npayment := gp.Payment{ID:\"pay_000000000000\"}.Get(&p)\r\n\r\n\r\n// Get all  []Transaction\r\ntransaction := gp.Transaction{}.All(&p)\r\n\r\n\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}